"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–ø–æ–Ω—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
"""

from collections import defaultdict
from math import log, atan
import numpy as np
import os
import random
import logging
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

from japanese_data import QUIZ_TYPES
from image_generator import JapaneseSymbolGenerator

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class JapaneseBotState:
    def __init__(self):
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        self.symbol_generator = JapaneseSymbolGenerator()
        
    def get_user_session(self, user_id: int) -> Dict[str, Any]:
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'current_symbol': None,
                'current_quiz_type': None,
                'score': 0,
                'total_questions': 0,
                'waiting_for_answer': False,
                'quiz_started': False,
                'current_question_message_id': None,
                'user_answer_message_id': None,
                'stats_message_id': None,
                'main_menu_message_id': None,
                'submenu_message_id': None,
                # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π
                'all_question_message_ids': [],
                'all_user_answer_message_ids': [],
                'all_stats_message_ids': [],
                'all_main_menu_message_ids': [],
                'all_submenu_message_ids': [],
                # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º
                'symbols_stats': defaultdict(int)
            }
        return self.user_sessions[user_id]


bot_state = JapaneseBotState()


def generate_wrong_answers(correct_symbol: str, quiz_type: str, count: int = 3) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    if quiz_type == "romaji_to_hiragana":
        data = QUIZ_TYPES["hiragana_to_romaji"]["data"]
    elif quiz_type == "romaji_to_katakana":
        data = QUIZ_TYPES["katakana_to_romaji"]["data"]
    else:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    all_symbols = [symbol for symbol in data.keys() if symbol != correct_symbol]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    import random
    wrong_answers = random.sample(all_symbols, min(count, len(all_symbols)))
    
    return wrong_answers


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    session = bot_state.get_user_session(user_id)
    session['score'] = 0
    session['total_questions'] = 0
    session['waiting_for_answer'] = False
    session['quiz_started'] = False
    session['current_question_message_id'] = None
    session['user_answer_message_id'] = None
    session['stats_message_id'] = None
    session['main_menu_message_id'] = None
    session['submenu_message_id'] = None
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π
    session['all_question_message_ids'] = []
    session['all_user_answer_message_ids'] = []
    session['all_stats_message_ids'] = []
    session['all_main_menu_message_ids'] = []
    session['all_submenu_message_ids'] = []
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º
    session['symbols_stats'] = defaultdict(int)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–ø–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üáØüáµ\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
        "üà≥ **–ö–∞–Ω–¥–∑–∏** - –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è (12 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "üà∂ **–•–∏—Ä–∞–≥–∞–Ω–∞** - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ª–æ–≥–æ–≤–∞—è –∞–∑–±—É–∫–∞ (46 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "üàØ **–ö–∞—Ç–∞–∫–∞–Ω–∞** - –∞–∑–±—É–∫–∞ –¥–ª—è –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (46 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–π –∞–∑–±—É–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n"
        "‚Ä¢ –°–∏–º–≤–æ–ª ‚Üí Romaji\n"
        "‚Ä¢ Romaji ‚Üí –°–∏–º–≤–æ–ª"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà≥ –ö–∞–Ω–¥–∑–∏", callback_data="quiz_kanji")],
        [InlineKeyboardButton("üà∂ –•–∏—Ä–∞–≥–∞–Ω–∞", callback_data="menu_hiragana")],
        [InlineKeyboardButton("üàØ –ö–∞—Ç–∞–∫–∞–Ω–∞", callback_data="menu_katakana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['main_menu_message_id'] = message.message_id
    session['all_main_menu_message_ids'].append(message.message_id)


async def show_quiz_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    if query:
        await query.answer()
    
    selection_message = (
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
        "üà≥ **–ö–∞–Ω–¥–∑–∏** - –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è (12 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "üà∂ **–•–∏—Ä–∞–≥–∞–Ω–∞** - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ª–æ–≥–æ–≤–∞—è –∞–∑–±—É–∫–∞ (46 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "üàØ **–ö–∞—Ç–∞–∫–∞–Ω–∞** - –∞–∑–±—É–∫–∞ –¥–ª—è –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (46 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–π –∞–∑–±—É–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n"
        "‚Ä¢ –°–∏–º–≤–æ–ª ‚Üí Romaji\n"
        "‚Ä¢ Romaji ‚Üí –°–∏–º–≤–æ–ª"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà≥ –ö–∞–Ω–¥–∑–∏", callback_data="quiz_kanji")],
        [InlineKeyboardButton("üà∂ –•–∏—Ä–∞–≥–∞–Ω–∞", callback_data="menu_hiragana")],
        [InlineKeyboardButton("üàØ –ö–∞—Ç–∞–∫–∞–Ω–∞", callback_data="menu_katakana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.message.reply_text(selection_message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(selection_message, reply_markup=reply_markup, parse_mode='Markdown')


async def show_hiragana_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ö–∏—Ä–∞–≥–∞–Ω—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    await query.answer()
    
    menu_message = (
        "üà∂ **–•–∏—Ä–∞–≥–∞–Ω–∞**\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤:\n\n"
        "**–ë–∞–∑–æ–≤–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞** (46 —Å–∏–º–≤–æ–ª–æ–≤) - –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n"
        "**–¢—ç–Ω—Ç—ç–Ω –∏ –º–∞—Ä—É** (25 —Å–∏–º–≤–æ–ª–æ–≤) - —Å–∏–º–≤–æ–ª—ã —Å „Çõ –∏ „Çú\n"
        "**–ü–æ–ª–Ω–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞** (71 —Å–∏–º–≤–æ–ª) - –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–µ"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà∂ –ë–∞–∑–æ–≤–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞", callback_data="hiragana_basic_menu")],
        [InlineKeyboardButton("üà∂„Çõ„Çú –¢—ç–Ω—Ç—ç–Ω –∏ –º–∞—Ä—É", callback_data="hiragana_dakuten_menu")],
        [InlineKeyboardButton("üà∂üìñ –ü–æ–ª–Ω–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞", callback_data="hiragana_full_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['submenu_message_id'] = message.message_id
    session['all_submenu_message_ids'].append(message.message_id)


async def show_hiragana_basic_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–∑–æ–≤–æ–π —Ö–∏—Ä–∞–≥–∞–Ω—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    await query.answer()
    
    menu_message = (
        "üà∂ **–ë–∞–∑–æ–≤–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞** (46 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
        "**–°–∏–º–≤–æ–ª ‚Üí Romaji**: –í–∏–¥–∏—à—å —Å–∏–º–≤–æ–ª —Ö–∏—Ä–∞–≥–∞–Ω—ã, –ø–∏—à–µ—à—å –µ–≥–æ —á—Ç–µ–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π\n"
        "**Romaji ‚Üí –°–∏–º–≤–æ–ª**: –í–∏–¥–∏—à—å —á—Ç–µ–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –≤—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà∂ ‚Üí üî§ –°–∏–º–≤–æ–ª ‚Üí Romaji", callback_data="quiz_hiragana_to_romaji")],
        [InlineKeyboardButton("üî§ ‚Üí üà∂ Romaji ‚Üí –°–∏–º–≤–æ–ª", callback_data="quiz_romaji_to_hiragana")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_hiragana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['submenu_message_id'] = message.message_id
    session['all_submenu_message_ids'].append(message.message_id)


async def show_hiragana_dakuten_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ö–∏—Ä–∞–≥–∞–Ω—ã —Å —Ç—ç–Ω—Ç—ç–Ω –∏ –º–∞—Ä—É"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    await query.answer()
    
    menu_message = (
        "üà∂„Çõ„Çú **–¢—ç–Ω—Ç—ç–Ω –∏ –º–∞—Ä—É** (25 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–°–∏–º–≤–æ–ª—ã —Ö–∏—Ä–∞–≥–∞–Ω—ã —Å –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏:\n"
        "‚Ä¢ **–¢—ç–Ω—Ç—ç–Ω** („Çõ) - –æ–∑–≤–æ–Ω—á–µ–Ω–∏–µ: „Åå, „Åñ, „Å†\n"
        "‚Ä¢ **–ú–∞—Ä—É** („Çú) - –ø—Ä–∏–¥—ã—Ö–∞–Ω–∏–µ: „Å±, „Å¥, „Å∑, „Å∫, „ÅΩ\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà∂„Çõ„Çú ‚Üí üî§ –°–∏–º–≤–æ–ª ‚Üí Romaji", callback_data="quiz_hiragana_dakuten_to_romaji")],
        [InlineKeyboardButton("üî§ ‚Üí üà∂„Çõ„Çú Romaji ‚Üí –°–∏–º–≤–æ–ª", callback_data="quiz_romaji_to_hiragana_dakuten")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_hiragana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['submenu_message_id'] = message.message_id
    session['all_submenu_message_ids'].append(message.message_id)


async def show_hiragana_full_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª–Ω–æ–π —Ö–∏—Ä–∞–≥–∞–Ω—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    await query.answer()
    
    menu_message = (
        "üà∂üìñ **–ü–æ–ª–Ω–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞** (71 —Å–∏–º–≤–æ–ª)\n\n"
        "–í—Å–µ —Å–∏–º–≤–æ–ª—ã —Ö–∏—Ä–∞–≥–∞–Ω—ã:\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (46)\n"
        "‚Ä¢ –°–∏–º–≤–æ–ª—ã —Å —Ç—ç–Ω—Ç—ç–Ω (20)\n"
        "‚Ä¢ –°–∏–º–≤–æ–ª—ã —Å –º–∞—Ä—É (5)\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà∂üìñ ‚Üí üî§ –°–∏–º–≤–æ–ª ‚Üí Romaji", callback_data="quiz_hiragana_full_to_romaji")],
        [InlineKeyboardButton("üî§ ‚Üí üà∂üìñ Romaji ‚Üí –°–∏–º–≤–æ–ª", callback_data="quiz_romaji_to_hiragana_full")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_hiragana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['submenu_message_id'] = message.message_id
    session['all_submenu_message_ids'].append(message.message_id)


async def show_katakana_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∫–∞—Ç–∞–∫–∞–Ω—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    await query.answer()
    
    menu_message = (
        "üàØ **–ö–∞—Ç–∞–∫–∞–Ω–∞** (46 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
        "**–°–∏–º–≤–æ–ª ‚Üí Romaji**: –í–∏–¥–∏—à—å —Å–∏–º–≤–æ–ª –∫–∞—Ç–∞–∫–∞–Ω—ã, –ø–∏—à–µ—à—å –µ–≥–æ —á—Ç–µ–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π\n"
        "**Romaji ‚Üí –°–∏–º–≤–æ–ª**: –í–∏–¥–∏—à—å —á—Ç–µ–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –≤—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫"
    )
    
    keyboard = [
        [InlineKeyboardButton("üàØ ‚Üí üî§ –°–∏–º–≤–æ–ª ‚Üí Romaji", callback_data="quiz_katakana_to_romaji")],
        [InlineKeyboardButton("üî§ ‚Üí üàØ Romaji ‚Üí –°–∏–º–≤–æ–ª", callback_data="quiz_romaji_to_katakana")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    session['submenu_message_id'] = message.message_id
    session['all_submenu_message_ids'].append(message.message_id)

def get_weight(delta: float) -> float:
    if delta >= 0:
        return 1.0 / (log(delta + 1)**2 + 1)
    return atan(-delta) + 1

def sample_symbol(stats: dict, symbols: list[str]) -> str:
    deltas = [float(stats[symbol]) for symbol in symbols]
    weights = [get_weight(delta) for delta in deltas]
    sum_weights = sum(weights)
    probas = [weight / sum_weights for weight in weights]
    return np.random.choice(symbols, p=probas)


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_type: str = None) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id
    
    session = bot_state.get_user_session(user_id)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if quiz_type:
        session['current_quiz_type'] = quiz_type
        session['quiz_started'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not session.get('current_quiz_type'):
        await show_quiz_selection(update, context)
        return
    
    current_quiz_type = session['current_quiz_type']
    quiz_info = QUIZ_TYPES[current_quiz_type]
    data = quiz_info['data']
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
    symbol = sample_symbol(session['symbol_stats'], data.keys())
    session['current_symbol'] = symbol
    session['waiting_for_answer'] = True
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if quiz_info['show_symbol']:
        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {session['total_questions'] + 1} ({quiz_info['name']})\n"
            f"üìä –°—á–µ—Ç: {session['score']}/{session['total_questions']}\n\n"
            f"–°–∏–º–≤–æ–ª: **{symbol}**\n\n"
            f"{quiz_info['question']}"
        )
        
        if current_quiz_type == "kanji":
            question_text += " –ù–∞–ø–∏—à–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"
        else:
            question_text += " –ù–∞–ø–∏—à–∏ –≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ (romaji):"
    else:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º romaji
        romaji = data[symbol]['romaji']
        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {session['total_questions'] + 1} ({quiz_info['name']})\n"
            f"üìä –°—á–µ—Ç: {session['score']}/{session['total_questions']}\n\n"
            f"–ß—Ç–µ–Ω–∏–µ: **{romaji}**\n\n"
            f"{quiz_info['question']} –ù–∞–ø–∏—à–∏ —Å–∏–º–≤–æ–ª:"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if quiz_info['answer_type'] == "symbol":
        # –î–ª—è —Ä–µ–∂–∏–º–æ–≤ Romaji‚Üí–°–∏–º–≤–æ–ª —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        wrong_answers = generate_wrong_answers(symbol, current_quiz_type, 3)
        all_answers = [symbol] + wrong_answers
        random.shuffle(all_answers)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(all_answers), 2):
            row = []
            for j in range(2):
                if i + j < len(all_answers):
                    answer = all_answers[i + j]
                    row.append(InlineKeyboardButton(answer, callback_data=f"answer_{answer}"))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="back_to_menu")])
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next_{current_quiz_type}")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="back_to_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if session.get('current_question_message_id') and query:
        try:
            await query.edit_message_text(
                text=question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            message = await query.message.reply_text(
                question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            session['current_question_message_id'] = message.message_id
            session['all_question_message_ids'].append(message.message_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if query:
            message = await query.message.reply_text(
                question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            message = await context.bot.send_message(
                chat_id=user_id,
                text=question_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        session['current_question_message_id'] = message.message_id
        session['all_question_message_ids'].append(message.message_id)


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    session = bot_state.get_user_session(user_id)
    
    if not session['waiting_for_answer'] or not session.get('quiz_started'):
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /start!"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    session['user_answer_message_id'] = update.message.message_id
    session['all_user_answer_message_ids'].append(update.message.message_id)
    
    current_quiz_type = session.get('current_quiz_type')
    if current_quiz_type:
        quiz_info = QUIZ_TYPES[current_quiz_type]
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if quiz_info['answer_type'] == "symbol":
            await update.message.reply_text(
                "–î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤! üëÜ"
            )
            return
    
    user_answer = update.message.text.lower().strip()
    current_symbol = session['current_symbol']
    current_quiz_type = session['current_quiz_type']
    
    if not current_symbol or not current_quiz_type:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    quiz_info = QUIZ_TYPES[current_quiz_type]
    symbol_data = quiz_info['data'][current_symbol]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if quiz_info['answer_type'] == "meaning":
        correct_answer = symbol_data['meaning'].lower()
        is_correct = user_answer in correct_answer or correct_answer in user_answer
    elif quiz_info['answer_type'] == "romaji":
        correct_answer = symbol_data['romaji'].lower()
        is_correct = user_answer == correct_answer
    else:  # answer_type == "symbol"
        correct_answer = current_symbol
        is_correct = user_answer == correct_answer
    
    session['total_questions'] += 1
    session['waiting_for_answer'] = False
    
    if is_correct:
        session['score'] += 1
        session['symbol_stats'][current_symbol] += 1
        response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
    else:
        session['symbol_stats'][current_symbol] -= 1
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    response += f"–°–∏–º–≤–æ–ª: {current_symbol}\n"
    
    if quiz_info['answer_type'] == "meaning":
        response += (
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {symbol_data['meaning']}\n"
            f"–ß—Ç–µ–Ω–∏–µ: {symbol_data['reading']} ({symbol_data['romaji']})\n"
        )
    else:
        response += (
            f"Romaji: {symbol_data['romaji']}\n"
            f"–ó–≤—É–∫: {symbol_data['sound']}\n"
        )
    
    if not is_correct:
        if quiz_info['answer_type'] == "meaning":
            response += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {symbol_data['meaning']}\n"
        elif quiz_info['answer_type'] == "romaji":
            response += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {symbol_data['romaji']}\n"
        else:  # answer_type == "symbol"
            response += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_symbol}\n"
        response += f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {update.message.text}\n"
    
    response += f"\nüìä –¢–≤–æ–π —Å—á–µ—Ç: {session['score']}/{session['total_questions']}"
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next_{current_quiz_type}")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if session.get('current_question_message_id'):
        try:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=session['current_question_message_id'],
                text=response,
                reply_markup=reply_markup
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            message = await update.message.reply_text(response, reply_markup=reply_markup)
            session['current_question_message_id'] = message.message_id
            session['all_question_message_ids'].append(message.message_id)
    else:
        message = await update.message.reply_text(response, reply_markup=reply_markup)
        session['current_question_message_id'] = message.message_id
        session['all_question_message_ids'].append(message.message_id)


async def handle_button_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_answer: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    
    if not session['waiting_for_answer'] or not session.get('quiz_started'):
        await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /start!")
        return
    
    current_symbol = session['current_symbol']
    current_quiz_type = session['current_quiz_type']
    
    if not current_symbol or not current_quiz_type:
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    quiz_info = QUIZ_TYPES[current_quiz_type]
    symbol_data = quiz_info['data'][current_symbol]
    
    session['total_questions'] += 1
    session['waiting_for_answer'] = False
    
    is_correct = selected_answer == current_symbol
    
    if is_correct:
        session['score'] += 1
        session['symbol_stats'][current_symbol] += 1
        response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
    else:
        session['symbol_stats'][current_symbol] -= 1
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    response += f"–°–∏–º–≤–æ–ª: {current_symbol}\n"
    response += (
        f"Romaji: {symbol_data['romaji']}\n"
        f"–ó–≤—É–∫: {symbol_data['sound']}\n"
    )
    
    if not is_correct:
        response += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_symbol}\n"
        response += f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {selected_answer}\n"
    
    response += f"\nüìä –¢–≤–æ–π —Å—á–µ—Ç: {session['score']}/{session['total_questions']}"
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next_{current_quiz_type}")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        await query.edit_message_text(
            text=response,
            reply_markup=reply_markup
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        message = await query.message.reply_text(response, reply_markup=reply_markup)
        session['current_question_message_id'] = message.message_id
        session['all_question_message_ids'].append(message.message_id)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    
    if session['total_questions'] == 0:
        stats_text = "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!"
    else:
        accuracy = (session['score'] / session['total_questions']) * 100
        stats_text = (
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['score']}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['total_questions'] - session['score']}\n"
            f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {session['total_questions']}\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    current_quiz_type = session.get('current_quiz_type')
    if current_quiz_type and session.get('quiz_started'):
        continue_button_text = "üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
        continue_callback = f"continue_{current_quiz_type}"
    else:
        continue_button_text = "üîô –í—ã–±—Ä–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
        continue_callback = "back_to_menu"
    
    keyboard = [[InlineKeyboardButton(continue_button_text, callback_data=continue_callback)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.message.reply_text(stats_text, reply_markup=reply_markup)
    session['stats_message_id'] = message.message_id
    session['all_stats_message_ids'].append(message.message_id)


async def delete_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if session.get('user_answer_message_id'):
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=session['user_answer_message_id']
            )
            session['user_answer_message_id'] = None
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass


async def delete_stats_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if session.get('stats_message_id'):
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=session['stats_message_id']
            )
            session['stats_message_id'] = None
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass


async def delete_all_messages_and_show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –£–¥–∞–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = query.from_user.id
    session = bot_state.get_user_session(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–æ–≤
    all_message_ids = []
    all_message_ids.extend(session.get('all_main_menu_message_ids', []))
    all_message_ids.extend(session.get('all_question_message_ids', []))
    all_message_ids.extend(session.get('all_user_answer_message_ids', []))
    all_message_ids.extend(session.get('all_stats_message_ids', []))
    all_message_ids.extend(session.get('all_submenu_message_ids', []))
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ ID –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Å–ø–∏—Å–∫–∏
    current_ids = [
        session.get('main_menu_message_id'),
        session.get('current_question_message_id'),
        session.get('user_answer_message_id'),
        session.get('stats_message_id'),
        session.get('submenu_message_id')
    ]
    all_message_ids.extend([id for id in current_ids if id is not None])
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_message_ids = list(set(all_message_ids))
    
    logger.info(f"–£–¥–∞–ª—è–µ–º {len(unique_message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π: {unique_message_ids}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for message_id in unique_message_ids:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=message_id
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            pass
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    session['main_menu_message_id'] = None
    session['current_question_message_id'] = None
    session['user_answer_message_id'] = None
    session['stats_message_id'] = None
    session['submenu_message_id'] = None
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    session['all_question_message_ids'] = []
    session['all_user_answer_message_ids'] = []
    session['all_stats_message_ids'] = []
    session['all_main_menu_message_ids'] = []
    session['all_submenu_message_ids'] = []
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    session['waiting_for_answer'] = False
    session['quiz_started'] = False
    
    # –°–æ–∑–¥–∞–µ–º –°–û–í–ï–†–®–ï–ù–ù–û –ù–û–í–û–ï –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    welcome_message = (
        f"üáØüáµ **–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:**\n\n"
        "üà≥ **–ö–∞–Ω–¥–∑–∏** - –∏–∑—É—á–µ–Ω–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤\n"
        "üà∂ **–•–∏—Ä–∞–≥–∞–Ω–∞** - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ª–æ–≥–æ–≤–∞—è –∞–∑–±—É–∫–∞\n"
        "üàØ **–ö–∞—Ç–∞–∫–∞–Ω–∞** - —Å–ª–æ–≥–æ–≤–∞—è –∞–∑–±—É–∫–∞ –¥–ª—è –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–π –∞–∑–±—É–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n"
        "‚Ä¢ –°–∏–º–≤–æ–ª ‚Üí Romaji\n"
        "‚Ä¢ Romaji ‚Üí –°–∏–º–≤–æ–ª"
    )
    
    keyboard = [
        [InlineKeyboardButton("üà≥ –ö–∞–Ω–¥–∑–∏", callback_data="quiz_kanji")],
        [InlineKeyboardButton("üà∂ –•–∏—Ä–∞–≥–∞–Ω–∞", callback_data="menu_hiragana")],
        [InlineKeyboardButton("üàØ –ö–∞—Ç–∞–∫–∞–Ω–∞", callback_data="menu_katakana")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!)
    message = await context.bot.send_message(
        chat_id=user_id,
        text=welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    session['main_menu_message_id'] = message.message_id
    session['all_main_menu_message_ids'].append(message.message_id)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å ID: {message.message_id}")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    if query.data.startswith("quiz_"):
        quiz_type = query.data.replace("quiz_", "")
        await start_quiz(update, context, quiz_type)
    elif query.data.startswith("next_"):
        quiz_type = query.data.replace("next_", "")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
        await delete_user_message(update, context)
        await delete_stats_message(update, context)
        await start_quiz(update, context, quiz_type)
    elif query.data.startswith("continue_"):
        quiz_type = query.data.replace("continue_", "")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        await delete_stats_message(update, context)
        await start_quiz(update, context, quiz_type)
    elif query.data.startswith("answer_"):
        selected_answer = query.data.replace("answer_", "")
        await handle_button_answer(update, context, selected_answer)
    elif query.data == "show_stats":
        await show_stats(update, context)
    elif query.data == "back_to_menu":
        await delete_all_messages_and_show_menu(update, context)
    elif query.data == "menu_hiragana":
        await show_hiragana_menu(update, context)
    elif query.data == "hiragana_basic_menu":
        await show_hiragana_basic_menu(update, context)
    elif query.data == "hiragana_dakuten_menu":
        await show_hiragana_dakuten_menu(update, context)
    elif query.data == "hiragana_full_menu":
        await show_hiragana_full_menu(update, context)
    elif query.data == "menu_katakana":
        await show_katakana_menu(update, context)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    bot_state.symbol_generator.generate_all_files()
    logger.info("–§–∞–π–ª—ã —Å–∏–º–≤–æ–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
